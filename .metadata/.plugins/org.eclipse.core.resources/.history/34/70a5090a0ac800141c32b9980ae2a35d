import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.*;
import java.util.concurrent.ExecutionException;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.JTextComponent;

import com.mysql.jdbc.Statement;

import net.miginfocom.swing.MigLayout;

@SuppressWarnings("serial")
public class MainGUI extends JFrame implements ActionListener  {
	
	
	private Task task;
	private JFrame frame;
	private JPanel panel, header, backnext, controls, settings, wrapper;
	private JLabel logo;
	private JButton exitBtn, miniBtn, maxiBtn, nextBtn, backBtn, settBtn;

    
    
	public MainGUI() {		
		
		create();
		
		try {
			test();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		style();
		add();
				
	}
	
	
	
	
	
	
	
	public void test() throws SQLException {
		
		
		
		
		
		wrapper  = new JPanel();
		wrapper.setLayout(new MigLayout("insets 0, gap 0"));
		
		JPanel content = new JPanel();
		content.setLayout(new CardLayout());

		
		JPanel card1 = new JPanel(new MigLayout());
		JPanel card2 = new JPanel(new MigLayout());

		
		card1.setBackground(new Color(0,0,0,0));
		
		
		
//		ArrayList<JPanel> lang = new ArrayList<>();
//		lang.add(new JPanel());
//		lang.add(new JPanel());
//		lang.add(new JPanel());
//		
//		
//
//		for(JPanel panel : lang ) {
//			panel.setLayout(new MigLayout("insets 0"));
//			panel.setBackground(Color.WHITE);
//			//panel.setBorder(new LineBorder(Color.LIGHT_GRAY, 5, true));
//			panel.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(0xdddddd)));    	
//			
//			JPanel  imgWrap = new JPanel();
//			JPanel  descrip = new JPanel();
//			JButton getBtn  = new JButton();
//			
//			imgWrap.setBackground(new Color(0xd35f40));
//			descrip.setBackground(new Color(0,0,0,0));
//			getBtn.setBackground(new Color(0,0,0,0));
//			
//			try {
//	    		
//				Image image  = ImageIO.read(new File("assets/img/go.png"));
//				//Image resize = image.getScaledInstance(40, 40,Image.SCALE_SMOOTH);
//				Border noBorder = BorderFactory.createEmptyBorder(0,10,0,0);
//				getBtn.setBorder(noBorder);
//				getBtn.setBorderPainted(false);
//				getBtn.setContentAreaFilled(false);
//				getBtn.setFocusPainted(false);
//				getBtn.setIcon(new ImageIcon(image));
//				getBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
//	    	} catch (IOException ex) { }
//			
//			panel.add(imgWrap, "w 200, h 100%, split 3");
//			panel.add(descrip, "push, growx, h 100%");
//			panel.add(getBtn, "w 90, h 100%");
//			
//			card1.add(panel, "w 80%, h 180px, gap 10% 10% 30px 0, wrap");
//
//
//		}
//		
		
		
		
		
		ArrayList<JPanel> lang = new ArrayList<>();
		
		
		
		
		Connection conn = null;
    	ResultSet resultSet = null;
		
    	try {
			
			Class.forName("com.mysql.jdbc.Driver");
				        
			conn = DriverManager.getConnection("jdbc:mysql://localhost/programmingassistant", "root", "");
	    	String query = "SELECT * FROM languages";
	    	Statement statement = (Statement) conn.createStatement(); 
	    	resultSet = statement.executeQuery(query);

		} catch (ClassNotFoundException e) { e.printStackTrace(); }
		
		
		
		int count = 0;
    	while(resultSet.next()) {
    		lang.add(new JPanel());
		
		System.out.println("test");
		JPanel panel = lang.get(count);
		
		

			panel.setLayout(new MigLayout("insets 0"));
			panel.setBackground(Color.WHITE);
			//panel.setBorder(new LineBorder(Color.LIGHT_GRAY, 5, true));
			panel.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(0xdddddd)));    	
			
			JPanel  imgWrap = new JPanel();
			JPanel  descrip = new JPanel();
			JButton getBtn  = new JButton();
			
			descrip.setLayout(new MigLayout());
			
			imgWrap.setBackground(new Color(0xd35f40));
			descrip.setBackground(new Color(0,0,0,0));
			getBtn.setBackground(new Color(0,0,0,0));
			
			try {
	    		
				Image image  = ImageIO.read(new File("assets/img/go.png"));
				//Image resize = image.getScaledInstance(40, 40,Image.SCALE_SMOOTH);
				Border noBorder = BorderFactory.createEmptyBorder(0,10,0,0);
				getBtn.setBorder(noBorder);
				getBtn.setBorderPainted(false);
				getBtn.setContentAreaFilled(false);
				getBtn.setFocusPainted(false);
				getBtn.setIcon(new ImageIcon(image));
				getBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
	    	} catch (IOException ex) { }
			
			JLabel title = new JLabel(resultSet.getString("langName"));
			JTextArea text = new JTextArea(resultSet.getString("langDesc"));
			text.setBackground(new Color(0,0,0,0));
			
			Font font = new Font("Segoe UI", Font.PLAIN, 15);
			Font font2 = new Font("Segoe UI", Font.BOLD, 16);
			
			text.setFont(font);
			title.setFont(font2);
			text.setWrapStyleWord(true);
			text.setLineWrap(true);
			text.setEditable(false);
			descrip.add(title, "w 100%, wrap");
			descrip.add(text, "push, growx, top");
			
			
			
			
			getBtn.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {

					
					card2.setBackground(Color.RED);
					
					content.add(card2, "card2");
					
					CardLayout card = (CardLayout) content.getLayout();
					card.show(content, "card2");
					
					
					
					
					
					
					
					
					
					
				}
				
			});
			
			
			
			
			panel.add(imgWrap, "w 200, h 100%");
			panel.add(descrip, "width 100%-290px, hmax 200px, gap 10");
			panel.add(getBtn, "w 90, h 100%");
			
			card1.add(panel, "w 90%, wrap, gap 5% 5% 30");

			count++;
			

		
    	}
		
		
	
		
		
		
		content.add(card1, "card2");
		
		
		
		
		
		

//		JPanel card2 = new JPanel(new MigLayout());
//		card2.setBackground(Color.YELLOW);
//		content.add(card2, "card2");
//		
//		CardLayout card = (CardLayout) content.getLayout();
//		card.show(content, "card2");
		
		
		wrapper.add(content, "push, grow");
		
		
		
		
		
		
		
		
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
    
    public void create() {
    	
    	frame = new JFrame();
    	panel = new JPanel();
    	
    	header   = new JPanel();
    	backnext = new JPanel();
    	controls = new JPanel();
    	settings = new JPanel();
    	
    	backBtn  = new JButton();
    	nextBtn  = new JButton();	
    	settBtn  = new JButton();
    	maxiBtn  = new JButton();
    	exitBtn  = new JButton();
    	miniBtn  = new JButton();

    	exitBtn.addActionListener(new actionListener());
    	miniBtn.addActionListener(new actionListener());

    	panel.setLayout(new MigLayout("insets 0"));
    	header.setLayout(new MigLayout("insets 15, gap 0"));
    	backnext.setLayout(new MigLayout("insets 0, gap 0"));
    	controls.setLayout(new MigLayout("insets 0, gap 0"));
    	settings.setLayout(new MigLayout("insets 0, gap 0"));
    
    }
    
    
    public void style() {
    	
    	
    	try {
            Image image = ImageIO.read(new File("assets/img/logo.png"));
			Image  resized  = image.getScaledInstance(55, 55,Image.SCALE_SMOOTH);
            ImageIcon logoImage = new ImageIcon(resized);
    		logo = new JLabel(logoImage);
    		
        } catch (IOException k) { k.printStackTrace(); }
    	
    	ArrayList<JButton> controlsBtns = new ArrayList<>();
    	controlsBtns.add(exitBtn);
    	controlsBtns.add(miniBtn);
    	controlsBtns.add(maxiBtn);
    	controlsBtns.add(settBtn);
    	
    	ArrayList<String> controlsIcons = new ArrayList<>();
    	controlsIcons.add("assets/img/exitIcon.png");
    	controlsIcons.add("assets/img/miniIcon.png");
    	controlsIcons.add("assets/img/maxiIcon.png");
    	controlsIcons.add("assets/img/settingsIcon.png");
    	
    	int controlsCount = 0;

		Border emptyBorder = BorderFactory.createEmptyBorder(10,10,10,10);

		for(JButton button : controlsBtns) {
			
	    	try {
				
	    		Image image  = ImageIO.read(new File(controlsIcons.get(controlsCount)));
				Image resize = image.getScaledInstance(14, 14,Image.SCALE_SMOOTH);
				button.setBorder(emptyBorder);
				button.setBorderPainted(false);
				button.setContentAreaFilled(false);
				button.setFocusPainted(false);
				button.setIcon(new ImageIcon(resize));
				controlsCount++;
				
			} catch (IOException ex) { }
		
		}
	
    	try {
    		
			Image image  = ImageIO.read(new File("assets/img/backIcon.png"));
			Image resize = image.getScaledInstance(40, 40,Image.SCALE_SMOOTH);
			Border noBorder = BorderFactory.createEmptyBorder(0,10,0,0);
			backBtn.setBorder(noBorder);
			backBtn.setBorderPainted(false);
			backBtn.setContentAreaFilled(false);
			backBtn.setFocusPainted(false);
			backBtn.setIcon(new ImageIcon(resize));

    	} catch (IOException ex) { }
    	

    	try {
    		
			Image image  = ImageIO.read(new File("assets/img/nextIcon.png"));
			Image resize = image.getScaledInstance(40, 40,Image.SCALE_SMOOTH);
			Border noBorder = BorderFactory.createEmptyBorder(0,0,0,0);
			nextBtn.setBorder(noBorder);
			nextBtn.setBorderPainted(false);
			nextBtn.setContentAreaFilled(false);
			nextBtn.setFocusPainted(false);
			nextBtn.setIcon(new ImageIcon(resize));

    	} catch (IOException ex) { }
    	

    	header.setBackground(Color.WHITE);
    	panel.setBackground(new Color(0xf8f8f8));
		controls.setBackground(new Color(0,0,0,0));
    	settings.setBackground(new Color(0,0,0,0));
    	backnext.setBackground(new Color(0,0,0,0));

		header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(0xeef1f1)));
		settings.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, new Color(0xeef1f1)));    	
      	
    }
    
    
    public void add() {
    			
		ComponentResizer cr = new ComponentResizer();
		cr.registerComponent(frame);
		cr.setSnapSize(new Dimension(10, 10));

		ComponentDraggable cd = new ComponentDraggable();
		cd.setDraggable(header, frame);
		
		backnext.add(backBtn);
    	backnext.add(nextBtn);
 
    	settings.add(settBtn, "right, push, gap 10 10");
    	controls.add(maxiBtn, "right, push");
    	controls.add(miniBtn, "right");
    	controls.add(exitBtn, "right");
		
		header.add(backnext, "w 200px");
    	header.add(logo,     "push, growx");
    	header.add(settings, "w 73px, gap 10 10");
    	header.add(controls, "w 60px");
    	
    	panel.add(header, "growx, hmax 90px, top, wrap");
		panel.add(wrapper, "push, grow, top");

		frame.setUndecorated(true);
		frame.setContentPane(new ShadowPane());
		frame.add(panel);
        frame.setBackground(new Color(0,0,0,0)); 

		frame.setSize(1100, 800);
		//frame.setSize(1100, 800);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		frame.setVisible(true);
    	
    }
    
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	class actionListener implements ActionListener{

	public void actionPerformed(ActionEvent e) {
	    JButton source = (JButton) e.getSource();
	    if(source == exitBtn) System.exit(0);
	    if(source == miniBtn) frame.setState(JFrame.ICONIFIED);
	}

	
	}
	
	
	
	
	
	
	


//	private final Action exitAction = new AbstractAction("") {
//
//		public void actionPerformed(ActionEvent e) {
//			System.exit(0);
//	    }
//		
//	};
//	
//	private final Action miniAction = new AbstractAction("") {
//
//		public void actionPerformed(ActionEvent e) {
//			frame.setState(JFrame.ICONIFIED);
//		}
//		
//	};
//	   
//	@SuppressWarnings("unused")
//	private final Action maximizeAction = new AbstractAction("") {
//	
//		public void actionPerformed(ActionEvent e) {
//			//frame.setExtendedState( frame.getExtendedState()|JFrame.MAXIMIZED_BOTH );
//		}
//	};
//	
//	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	class Task extends SwingWorker<Boolean, Void> {
       
        public Boolean doInBackground() {

      
        	return null;
        
    	
        }

        public void done() {       	
        	
        }
    }
	

	
	
	public void actionPerformed(ActionEvent evt) {
		
		
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        task = new Task();
        task.execute();
    
	}
	
	
	
	
	
	
	
	
	
	public class ShadowPane extends JPanel {

		public ShadowPane() {
			setLayout(new BorderLayout());
	        setOpaque(false);
	        setBackground(Color.BLACK);
	        setBorder(new EmptyBorder(12, 12, 2, 2));
	    }

	    @Override
	    public Dimension getPreferredSize() {
	    	return new Dimension(200, 200);
	    }

	    @Override
	    protected void paintComponent(Graphics g) {
	    	super.paintComponent(g);
	    	Graphics2D g2d = (Graphics2D) g.create();
	    	g2d.setComposite(AlphaComposite.SrcOver.derive(0.2f));
	    	g2d.fillRect(10, 10, getWidth(), getHeight());
	    	g2d.dispose();
	    }
	  
	}
	
	
	
	
	
}
